// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1024.Emmet.subsystems;

import org.usfirst.frc1024.Emmet.Robot;
import org.usfirst.frc1024.Emmet.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Lifter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static CANTalon lift1 = RobotMap.lifterLift1;
	public static CANTalon lift2 = RobotMap.lifterLift2;
    public static DigitalInput level0 = RobotMap.lifterLevel0;
    public static DigitalInput level1 = RobotMap.lifterLevel1;
    public static DigitalInput level2 = RobotMap.lifterLevel2;
    public static DigitalInput level3 = RobotMap.lifterLevel3;
    public static DigitalInput level4 = RobotMap.lifterLevel4;
    public static AnalogInput IR = RobotMap.lifterIR;
  //  Encoder liftEncoder = RobotMap.lifterLiftEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public static void LiftMotors(int level){
    	if(level<Robot.position){
    		for(int i=Robot.position; i<level; i--){
        		lift1.set(-1);
        		lift2.set(1);
        		while(level3.get()==true && level2.get()==true && level1.get()==true && level0.get()==true){
        		}
    		}
    		lift1.set(0);
    		lift2.set(0);
    	}else if(level>Robot.position){
    		for(int i=Robot.position; i>level; i++){
    			lift1.set(1);
        		lift2.set(-1);
        		while(level4.get()==true && level3.get()==true && level2.get()==true && level1.get()==true){
        		}
    		}
    		lift1.set(0);
    		lift2.set(0);
    	}else{
    		lift1.set(0);
    		lift2.set(0);
    	}
    	Robot.position=level;
    }
    public static void Up(double speed){
    	lift1.set(-speed);
    	lift2.set(speed);
    }
    public static void Down(double speed){
    	lift1.set(speed);
    	lift2.set(-speed);
    }
    public static void Stop(){
    	lift1.set(0);
    	lift2.set(0);
    }
}